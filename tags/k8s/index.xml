<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>K8s on Book of Daniel</title>
    <link>https://example.org/tags/k8s/</link>
    <description>Recent content in K8s on Book of Daniel</description>
    <image>
      <title>Book of Daniel</title>
      <url>https://example.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://example.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.134.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Sep 2024 13:52:32 +0530</lastBuildDate>
    <atom:link href="https://example.org/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Architecture Explained the Ship Analogy of KodeKloud</title>
      <link>https://example.org/posts/kubernetes-architecture-explained-the-ship-analogy-of-kodekloud/</link>
      <pubDate>Thu, 12 Sep 2024 13:52:32 +0530</pubDate>
      <guid>https://example.org/posts/kubernetes-architecture-explained-the-ship-analogy-of-kodekloud/</guid>
      <description>&lt;p&gt;Welcome to our exploration of Kubernetes architecture! Kubernetes, often abbreviated as K8s, is a powerful tool designed to manage containerized applications in a scalable and automated fashion. This blog post aims to provide a high-level understanding of Kubernetes architecture using an analogy of ships, which simplifies the complex interplay between its components. Special thanks to KodeKloud for their insightful lecture, which inspired this overview.&lt;/p&gt;
&lt;h3 id=&#34;the-kubernetes-cluster-ships-at-sea&#34;&gt;The Kubernetes Cluster: Ships at Sea&lt;/h3&gt;
&lt;p&gt;At its core, a Kubernetes cluster comprises two types of nodes: worker nodes and master nodes. To understand their roles, let&amp;rsquo;s imagine a fleet of ships:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
